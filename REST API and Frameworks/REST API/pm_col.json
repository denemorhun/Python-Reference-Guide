{
	"info": {
		"_postman_id": "51e06cf3-c14b-4bf4-97c1-55e049796463",
		"name": "LinkedLearningCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic End Point Tests",
			"item": [
				{
					"name": "Get Contact List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f502ea19-2214-4cc1-a13c-0598f31eda6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json; charset=utf-8\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "3.13.86.142:3000/contacts",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts"
							]
						},
						"description": "Basic Get"
					},
					"response": []
				},
				{
					"name": "Create Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3cc6040-32e5-414f-b870-e45533744343",
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201,202]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"Dai\",\n        \"lastName\": \"Vu\",\n        \"email\": \"de@fage.com\",\n        \"location\": {\n            \"city\": \"auburn, AL\",\n            \"country\": \"USA\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"Test Engineer\",\n            \"company\": \"Microsoft\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "3.13.86.142:3000/contacts",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts"
							]
						},
						"description": "Basic Get"
					},
					"response": []
				},
				{
					"name": "Create Contact with global param",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fdbc8ff0-3710-46e4-bf54-dae0e86ea249",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"contactId\", jsonData._id);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201,202]);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"location\": {\n            \"city\": \"{{city}}\",\n            \"country\": \"{{country}}\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"{{jobTitle}}\",\n            \"company\": \"{{company}}\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "3.13.86.142:3000/contacts",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts"
							]
						},
						"description": "Create via Post"
					},
					"response": []
				},
				{
					"name": "Get  specific contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "560237dc-73b9-45e1-9761-75ad02104fe8",
								"exec": [
									"pm.environment.get(\"jsonData._id\");",
									"",
									"// body should contain the email",
									"pm.test(\"Correct contact is returned and verified by email\", function () {",
									"    pm.expect(pm.response.text()).to.include(environment.email);",
									"});",
									"",
									"// JSON data assertions",
									"  var jsonData = pm.response.json(); ",
									"",
									"// assert correct first name is returned",
									"pm.test(\"Correct first name is returned\", function () {",
									"    pm.expect(jsonData.firstName).to.eql(environment.firstName);",
									"});",
									"",
									"// assert correct last name is returned",
									"pm.test(\"Correct last name is returned\", function () {",
									"    pm.expect(jsonData.lastName).to.eql(environment.lastName);",
									"});",
									"",
									"// assert correct email is returned",
									"pm.test(\"Correct email is returned\", function () {",
									"    pm.expect(jsonData.email).to.eql(environment.email);",
									"});",
									"",
									"// assert correct city is returned ",
									"pm.test(\"Correct city is returned\", function () {",
									"    pm.expect(jsonData.location.city).to.eql(environment.city);",
									"});",
									"",
									"// assert correct country is returned",
									"pm.test(\"Correct country is returned\", function () {",
									"    pm.expect(jsonData.location.country).to.eql(environment.country);",
									"});",
									"",
									"// assert correct jobtitle is returned",
									"pm.test(\"Correct jobtitle is returned\", function () {",
									"    pm.expect(jsonData.employer.jobTitle).to.eql(environment.jobTitle);",
									"});",
									"",
									"// assert correct company is returned",
									"pm.test(\"Correct company is returned\", function () {",
									"    pm.expect(jsonData.employer.company).to.eql(environment.company);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "3.13.86.142:3000/contacts/{{contactId}}",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts",
								"{{contactId}}"
							]
						},
						"description": "Basic Get"
					},
					"response": []
				},
				{
					"name": "Update Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0917e50-b165-400f-a9f8-4acb6a6c8ccf",
								"exec": [
									"pm.environment.get(\"jsonData._id\");",
									"",
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"dingo\",\n        \"lastName\": \"Kay\",\n        \"email\": \"sede@ka.com\",\n        \"location\": {\n            \"city\": \"denver, CO\",\n            \"country\": \"USA\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"Test Engineer\",\n            \"company\": \"Microsoft\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://3.13.86.142:3000/contacts/{{contactId}}",
							"protocol": "http",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts",
								"{{contactId}}"
							]
						},
						"description": "Basic Get"
					},
					"response": []
				},
				{
					"name": "Delete Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "419a9a3a-a0eb-45ba-ac58-715fbfd3022f",
								"exec": [
									"pm.test(\"Response body should not included the deleted\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"firstName\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 204 when succesfully deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "3.13.86.142:3000/contacts/{{contactId}}",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts",
								"{{contactId}}"
							]
						},
						"description": "Basic Get"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Test Cases",
			"item": [
				{
					"name": "Create Contact with Missing Name Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfda6126-7b05-4a9f-9078-d77fe0e60336",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"\",\n        \"lastName\": \"Vu\",\n        \"email\": \"de@fage.com\",\n        \"location\": {\n            \"city\": \"auburn, AL\",\n            \"country\": \"USA\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"Test Engineer\",\n            \"company\": \"Microsoft\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "3.13.86.142:3000/contacts",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts"
							]
						},
						"description": "Negative Test with missing name"
					},
					"response": []
				},
				{
					"name": "Create Contact that will fail job title validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "deb4b105-7ba4-4829-878b-792d50e031e6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Verify failure to create user if validation fails for job title\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Validation failed: jobTitle\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"Daai\",\n        \"lastName\": \"Vu\",\n        \"email\": \"de@fage.com\",\n        \"location\": {\n            \"city\": \"auburn, AL\",\n            \"country\": \"USA\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"Test____%%Engineer\",\n            \"company\": \"Microsoft\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "3.13.86.142:3000/contacts",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts"
							]
						},
						"description": "Negative Test with missing name"
					},
					"response": []
				},
				{
					"name": "Create Contact with Missing LastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0600cb08-bae4-46ed-a4a8-95c3bebf2387",
								"exec": [
									"pm.test(\"Status code is correct(400)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Last name is missing and validation is succesful\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Last Name is required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"Dai\",\n        \"lastName\": \"\",\n        \"email\": \"de@fage.com\",\n        \"location\": {\n            \"city\": \"auburn, AL\",\n            \"country\": \"USA\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"Test Engineer\",\n            \"company\": \"Microsoft\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "3.13.86.142:3000/contacts",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts"
							]
						},
						"description": "Negative Test with missing name"
					},
					"response": []
				},
				{
					"name": "Get unknown contact id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "064d5655-ea1b-4bbd-becd-eccec3597ab9",
								"exec": [
									"pm.test(\"Status code is 404 - not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "3.13.86.142:3000/contacts/1",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts",
								"1"
							]
						},
						"description": "Basic Get"
					},
					"response": []
				},
				{
					"name": "Create Contact with global param Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4654213-9336-4244-a4b1-523899d770a8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"contactId\", jsonData._id);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201,202]);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"{{firstName}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"email\": \"{{email}}\",\n        \"location\": {\n            \"city\": \"{{city}}\",\n            \"country\": \"{{country}}\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"{{jobTitle}}\",\n            \"company\": \"{{company}}\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "3.13.86.142:3000/contacts",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts"
							]
						},
						"description": "Create via Post"
					},
					"response": []
				},
				{
					"name": "Create Contact with name outside allocated length",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19812139-a813-44a0-b837-6b0699ede403",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"First name is too long response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is longer than the maximum allowed length\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        \"lastName\": \"Vu\",\n        \"email\": \"de@fage.com\",\n        \"location\": {\n            \"city\": \"auburn, AL\",\n            \"country\": \"USA\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"Test Engineer\",\n            \"company\": \"Microsoft\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://3.13.86.142:3000/contacts/{{contactId}}",
							"protocol": "http",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts",
								"{{contactId}}"
							]
						},
						"description": "Negative Test with missing name"
					},
					"response": []
				},
				{
					"name": "Create Contact with Missing email validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6af9922-37fd-4bda-b34b-b004b1eb9200",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n        \"firstName\": \"Dai\",\n        \"lastName\": \"Vu\",\n        \"email\": \".com\",\n        \"location\": {\n            \"city\": \"auburn, AL\",\n            \"country\": \"USA\"\n        },\n        \"employer\": {\n            \"jobTitle\": \"Test Engineer\",\n            \"company\": \"Microsoft\"\n        }\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://3.13.86.142:3000/contacts/{{contactId}}",
							"protocol": "http",
							"host": [
								"3",
								"13",
								"86",
								"142"
							],
							"port": "3000",
							"path": [
								"contacts",
								"{{contactId}}"
							]
						},
						"description": "Negative Test with missing email"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Pet Owners",
			"item": [
				{
					"name": "Get Pet Owners",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd511654-f6b5-4984-bc4e-8999c07eb610",
								"exec": [
									"// from array of users, assert 1st user, 2nd cat has breed Siamese",
									"",
									"pm.test(\"Amy's second cat is siamese\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.owners[0].pets.cats[1].breed).to.eql(\"Siamese\");",
									"});",
									"",
									"// from array of users, assert 2nd user, 2nd dog has name Fred",
									"pm.test(\"Carol's second dog is name Fred\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.owners[2].pets.dogs[1].name).to.eql(\"Fred\");",
									"});",
									"",
									"// assert bob's first cat is 2 years old ",
									"",
									"pm.test(\"Bob's first cat is 2 years old\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.owners[1].pets.cats[0].age).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://98f2c9ce-fa98-4bd1-ac26-3da85ea67799.mock.pstmn.io/owners",
							"protocol": "https",
							"host": [
								"98f2c9ce-fa98-4bd1-ac26-3da85ea67799",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"owners"
							]
						}
					},
					"response": [
						{
							"name": "Get Pet Owners",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/owners",
									"host": [
										"{{url}}"
									],
									"path": [
										"owners"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n   \"owners\":[\n      {\n         \"id\":1,\n         \"name\":\"Amy\",\n         \"pets\":{\n            \"cats\":[\n               {\n                  \"name\":\"Fluffy\",\n                  \"age\":2,\n                  \"breed\":\"Persian\"\n               },\n               {\n                  \"name\":\"Mister Whiskers\",\n                  \"age\":4,\n                  \"breed\":\"Siamese\"\n               }\n            ],\n            \"dogs\":[\n               {\n                  \"name\":\"Spot\",\n                  \"age\":3,\n                  \"breed\":\"Labrador Retriever\"\n               }\n            ]\n         }\n      },\n      {\n         \"id\":2,\n         \"name\":\"Bob\",\n         \"pets\":{\n            \"cats\":[\n               {\n                  \"name\":\"Galadriel\",\n                  \"age\":2,\n                  \"breed\":\"Ragdoll\"\n               },\n               {\n                  \"name\":\"Gandalf\",\n                  \"age\":3,\n                  \"breed\":\"Ragdoll\"\n               }\n            ]\n         }\n      },\n      {\n         \"id\":3,\n         \"name\":\"Carol\",\n         \"pets\":{\n            \"cats\":[\n               {\n                  \"name\":\"D'Artagnan\",\n                  \"age\":5,\n                  \"breed\":\"Persian\"\n               }\n            ],\n            \"dogs\":[\n               {\n                  \"name\":\"Moe\",\n                  \"age\":3,\n                  \"breed\":\"Border Collie\"\n               },\n               {\n                  \"name\":\"Fred\",\n                  \"age\":3,\n                  \"breed\":\"Shih Tzu\"\n               },\n               {\n                  \"name\":\"Penelope\",\n                  \"age\":4,\n                  \"breed\":\"Great Dane\"\n               }\n            ]\n         }\n      }\n   ]\n}"
						}
					]
				},
				{
					"name": "Get Pet Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcc68ca1-25bc-4a4d-a886-b1883e7adf62",
								"exec": [
									"pm.test(\"Asssert Amy's first cat's name is Fluffy\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pets.cats[0].name).to.eql(\"Fluffy\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://98f2c9ce-fa98-4bd1-ac26-3da85ea67799.mock.pstmn.io/owners/1",
							"protocol": "https",
							"host": [
								"98f2c9ce-fa98-4bd1-ac26-3da85ea67799",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"owners",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Get Pet Owner",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/owners/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"owners",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n\t\"id\": 1,\n\t\"name\": \"Amy\",\n\t\"pets\": {\n\t\t\"cats\": [{\n\t\t\t\t\"name\": \"Fluffy\",\n\t\t\t\t\"age\": 2,\n\t\t\t\t\"breed\": \"Persian\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"Mister Whiskers\",\n\t\t\t\t\"age\": 4,\n\t\t\t\t\"breed\": \"Siamese\"\n\t\t\t}\n\t\t],\n\t\t\"dogs\": [{\n\t\t\t\"name\": \"Spot\",\n\t\t\t\"age\": 3,\n\t\t\t\"breed\": \"Labrador Retriever\"\n\t\t}]\n\t}\n}"
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "03cdc372-2447-446d-a483-ecac55fbf165",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "16dfdcd9-b8b3-4350-8f15-df7c09f7de9d",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 2000\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});"
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}